Traceback (most recent call last):
  File "/Users/ranit/anaconda3/envs/gbi-python-env/lib/python3.13/site-packages/jupyter_core/utils/__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
    ~~~~~~~~~~~~~~~~~~~~~~~~^^
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/ranit/anaconda3/envs/gbi-python-env/lib/python3.13/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
    ~~~~~~~~~^
        nb,
        ^^^
    ...<4 lines>...
        **kwargs,
        ^^^^^^^^^
    )
    ^
  File "/Users/ranit/anaconda3/envs/gbi-python-env/lib/python3.13/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^
  File "/Users/ranit/anaconda3/envs/gbi-python-env/lib/python3.13/site-packages/jupyter_core/utils/__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
           ~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "/Users/ranit/anaconda3/envs/gbi-python-env/lib/python3.13/asyncio/base_events.py", line 721, in run_until_complete
    return future.result()
           ~~~~~~~~~~~~~^^
  File "/Users/ranit/anaconda3/envs/gbi-python-env/lib/python3.13/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
        cell, index, execution_count=self.code_cells_executed + 1
    )
  File "/Users/ranit/anaconda3/envs/gbi-python-env/lib/python3.13/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Users/ranit/anaconda3/envs/gbi-python-env/lib/python3.13/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# Distance transform
distance = ndi.distance_transform_edt(binary)
plt.imshow(distance, cmap='magma')
plt.title('Distance Transform')
plt.axis('off')
plt.show()

# Find peaks in distance image
from skimage.feature import peak_local_max
local_maxi = feature.peak_local_max(distance, labels=binary, footprint=np.ones((3, 3)))

# Markers
markers = ndi.label(local_maxi)[0]

# Apply watershed
labels = segmentation.watershed(-distance, markers, mask=binary)

# Visualize
plt.imshow(color.label2rgb(labels, image=image, bg_label=0))
plt.title("Watershed Segmentation")
plt.axis('off')
plt.show()
------------------


[31m---------------------------------------------------------------------------[39m
[31mValueError[39m                                Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[5][39m[32m, line 16[39m
[32m     13[39m markers = ndi.label(local_maxi)[[32m0[39m]
[32m     15[39m [38;5;66;03m# Apply watershed[39;00m
[32m---> [39m[32m16[39m labels = [43msegmentation[49m[43m.[49m[43mwatershed[49m[43m([49m[43m-[49m[43mdistance[49m[43m,[49m[43m [49m[43mmarkers[49m[43m,[49m[43m [49m[43mmask[49m[43m=[49m[43mbinary[49m[43m)[49m
[32m     18[39m [38;5;66;03m# Visualize[39;00m
[32m     19[39m plt.imshow(color.label2rgb(labels, image=image, bg_label=[32m0[39m))

[36mFile [39m[32m~/anaconda3/envs/gbi-python-env/lib/python3.13/site-packages/skimage/segmentation/_watershed.py:213[39m, in [36mwatershed[39m[34m(image, markers, connectivity, offset, mask, compactness, watershed_line)[39m
[32m     86[39m [38;5;28;01mdef[39;00m[38;5;250m [39m[34mwatershed[39m(
[32m     87[39m     image,
[32m     88[39m     markers=[38;5;28;01mNone[39;00m,
[32m   (...)[39m[32m     93[39m     watershed_line=[38;5;28;01mFalse[39;00m,
[32m     94[39m ):
[32m     95[39m [38;5;250m    [39m[33;03m"""Find watershed basins in an image flooded from given markers.[39;00m
[32m     96[39m 
[32m     97[39m [33;03m    Parameters[39;00m
[32m   (...)[39m[32m    211[39m [33;03m    separate overlapping spheres.[39;00m
[32m    212[39m [33;03m    """[39;00m
[32m--> [39m[32m213[39m     image, markers, mask = [43m_validate_inputs[49m[43m([49m[43mimage[49m[43m,[49m[43m [49m[43mmarkers[49m[43m,[49m[43m [49m[43mmask[49m[43m,[49m[43m [49m[43mconnectivity[49m[43m)[49m
[32m    214[39m     connectivity, offset = _validate_connectivity(image.ndim, connectivity, offset)
[32m    216[39m     [38;5;66;03m# pad the image, markers, and mask so that we can use the mask to[39;00m
[32m    217[39m     [38;5;66;03m# keep from running off the edges[39;00m

[36mFile [39m[32m~/anaconda3/envs/gbi-python-env/lib/python3.13/site-packages/skimage/segmentation/_watershed.py:76[39m, in [36m_validate_inputs[39m[34m(image, markers, mask, connectivity)[39m
[32m     74[39m     markers *= mask
[32m     75[39m [38;5;28;01melse[39;00m:
[32m---> [39m[32m76[39m     markers = [43mnp[49m[43m.[49m[43masanyarray[49m[43m([49m[43mmarkers[49m[43m)[49m[43m [49m[43m*[49m[43m [49m[43mmask[49m
[32m     77[39m     [38;5;28;01mif[39;00m markers.shape != image.shape:
[32m     78[39m         message = (
[32m     79[39m             [33mf[39m[33m'[39m[33m`markers` (shape [39m[38;5;132;01m{[39;00mmarkers.shape[38;5;132;01m}[39;00m[33m) must have same [39m[33m'[39m
[32m     80[39m             [33mf[39m[33m'[39m[33mshape as `image` (shape [39m[38;5;132;01m{[39;00mimage.shape[38;5;132;01m}[39;00m[33m)[39m[33m'[39m
[32m     81[39m         )

[31mValueError[39m: operands could not be broadcast together with shapes (536,2) (512,512) 

