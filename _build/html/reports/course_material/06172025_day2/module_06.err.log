Traceback (most recent call last):
  File "/Users/ranit/anaconda3/lib/python3.11/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/Users/ranit/anaconda3/lib/python3.11/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/ranit/anaconda3/lib/python3.11/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/ranit/anaconda3/lib/python3.11/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/ranit/anaconda3/lib/python3.11/asyncio/base_events.py", line 653, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/Users/ranit/anaconda3/lib/python3.11/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/Users/ranit/anaconda3/lib/python3.11/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Users/ranit/anaconda3/lib/python3.11/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
from skimage import color

rgb_image = io.imread('data/nuclei.tif')  # Substitute with an H&E image if available
gray_image = color.rgb2gray(rgb_image)

plt.subplot(1, 2, 1)
plt.imshow(rgb_image)
plt.title("Original RGB")

plt.subplot(1, 2, 2)
plt.imshow(gray_image, cmap='gray')
plt.title("Grayscale")

plt.show()

------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mValueError[0m                                Traceback (most recent call last)
Cell [0;32mIn[2], line 4[0m
[1;32m      1[0m [38;5;28;01mfrom[39;00m[38;5;250m [39m[38;5;21;01mskimage[39;00m[38;5;250m [39m[38;5;28;01mimport[39;00m color
[1;32m      3[0m rgb_image [38;5;241m=[39m io[38;5;241m.[39mimread([38;5;124m'[39m[38;5;124mdata/nuclei.tif[39m[38;5;124m'[39m)  [38;5;66;03m# Substitute with an H&E image if available[39;00m
[0;32m----> 4[0m gray_image [38;5;241m=[39m color[38;5;241m.[39mrgb2gray(rgb_image)
[1;32m      6[0m plt[38;5;241m.[39msubplot([38;5;241m1[39m, [38;5;241m2[39m, [38;5;241m1[39m)
[1;32m      7[0m plt[38;5;241m.[39mimshow(rgb_image)

File [0;32m~/anaconda3/lib/python3.11/site-packages/skimage/_shared/utils.py:326[0m, in [0;36mchannel_as_last_axis.__call__.<locals>.fixed_func[0;34m(*args, **kwargs)[0m
[1;32m    323[0m channel_axis [38;5;241m=[39m kwargs[38;5;241m.[39mget([38;5;124m'[39m[38;5;124mchannel_axis[39m[38;5;124m'[39m, [38;5;28;01mNone[39;00m)
[1;32m    325[0m [38;5;28;01mif[39;00m channel_axis [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m:
[0;32m--> 326[0m     [38;5;28;01mreturn[39;00m func([38;5;241m*[39margs, [38;5;241m*[39m[38;5;241m*[39mkwargs)
[1;32m    328[0m [38;5;66;03m# TODO: convert scalars to a tuple in anticipation of eventually[39;00m
[1;32m    329[0m [38;5;66;03m#       supporting a tuple of channel axes. Right now, only an[39;00m
[1;32m    330[0m [38;5;66;03m#       integer or a single-element tuple is supported, though.[39;00m
[1;32m    331[0m [38;5;28;01mif[39;00m np[38;5;241m.[39misscalar(channel_axis):

File [0;32m~/anaconda3/lib/python3.11/site-packages/skimage/color/colorconv.py:875[0m, in [0;36mrgb2gray[0;34m(rgb, channel_axis)[0m
[1;32m    834[0m [38;5;129m@channel_as_last_axis[39m(multichannel_output[38;5;241m=[39m[38;5;28;01mFalse[39;00m)
[1;32m    835[0m [38;5;28;01mdef[39;00m[38;5;250m [39m[38;5;21mrgb2gray[39m(rgb, [38;5;241m*[39m, channel_axis[38;5;241m=[39m[38;5;241m-[39m[38;5;241m1[39m):
[1;32m    836[0m [38;5;250m    [39m[38;5;124;03m"""Compute luminance of an RGB image.[39;00m
[1;32m    837[0m 
[1;32m    838[0m [38;5;124;03m    Parameters[39;00m
[0;32m   (...)[0m
[1;32m    873[0m [38;5;124;03m    >>> img_gray = rgb2gray(img)[39;00m
[1;32m    874[0m [38;5;124;03m    """[39;00m
[0;32m--> 875[0m     rgb [38;5;241m=[39m _prepare_colorarray(rgb)
[1;32m    876[0m     coeffs [38;5;241m=[39m np[38;5;241m.[39marray([[38;5;241m0.2125[39m, [38;5;241m0.7154[39m, [38;5;241m0.0721[39m], dtype[38;5;241m=[39mrgb[38;5;241m.[39mdtype)
[1;32m    877[0m     [38;5;28;01mreturn[39;00m rgb [38;5;241m@[39m coeffs

File [0;32m~/anaconda3/lib/python3.11/site-packages/skimage/color/colorconv.py:140[0m, in [0;36m_prepare_colorarray[0;34m(arr, force_copy, channel_axis)[0m
[1;32m    137[0m [38;5;28;01mif[39;00m arr[38;5;241m.[39mshape[channel_axis] [38;5;241m!=[39m [38;5;241m3[39m:
[1;32m    138[0m     msg [38;5;241m=[39m ([38;5;124mf[39m[38;5;124m'[39m[38;5;124mthe input array must have size 3 along `channel_axis`, [39m[38;5;124m'[39m
[1;32m    139[0m            [38;5;124mf[39m[38;5;124m'[39m[38;5;124mgot [39m[38;5;132;01m{[39;00marr[38;5;241m.[39mshape[38;5;132;01m}[39;00m[38;5;124m'[39m)
[0;32m--> 140[0m     [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m(msg)
[1;32m    142[0m float_dtype [38;5;241m=[39m _supported_float_type(arr[38;5;241m.[39mdtype)
[1;32m    143[0m [38;5;28;01mif[39;00m float_dtype [38;5;241m==[39m np[38;5;241m.[39mfloat32:

[0;31mValueError[0m: the input array must have size 3 along `channel_axis`, got (512, 512)
ValueError: the input array must have size 3 along `channel_axis`, got (512, 512)

