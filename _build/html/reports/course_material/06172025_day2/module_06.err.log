Traceback (most recent call last):
  File "/Users/ranit/anaconda3/envs/gbi-python-env/lib/python3.13/site-packages/jupyter_core/utils/__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
    ~~~~~~~~~~~~~~~~~~~~~~~~^^
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/ranit/anaconda3/envs/gbi-python-env/lib/python3.13/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
    ~~~~~~~~~^
        nb,
        ^^^
    ...<4 lines>...
        **kwargs,
        ^^^^^^^^^
    )
    ^
  File "/Users/ranit/anaconda3/envs/gbi-python-env/lib/python3.13/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^
  File "/Users/ranit/anaconda3/envs/gbi-python-env/lib/python3.13/site-packages/jupyter_core/utils/__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
           ~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "/Users/ranit/anaconda3/envs/gbi-python-env/lib/python3.13/asyncio/base_events.py", line 721, in run_until_complete
    return future.result()
           ~~~~~~~~~~~~~^^
  File "/Users/ranit/anaconda3/envs/gbi-python-env/lib/python3.13/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
        cell, index, execution_count=self.code_cells_executed + 1
    )
  File "/Users/ranit/anaconda3/envs/gbi-python-env/lib/python3.13/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Users/ranit/anaconda3/envs/gbi-python-env/lib/python3.13/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
from skimage import color

rgb_image = io.imread('data/nuclei.tif')  # Substitute with an H&E image if available
gray_image = color.rgb2gray(rgb_image)

plt.subplot(1, 2, 1)
plt.imshow(rgb_image)
plt.title("Original RGB")

plt.subplot(1, 2, 2)
plt.imshow(gray_image, cmap='gray')
plt.title("Grayscale")

plt.show()

------------------


[31m---------------------------------------------------------------------------[39m
[31mValueError[39m                                Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[2][39m[32m, line 4[39m
[32m      1[39m [38;5;28;01mfrom[39;00m[38;5;250m [39m[34;01mskimage[39;00m[38;5;250m [39m[38;5;28;01mimport[39;00m color
[32m      3[39m rgb_image = io.imread([33m'[39m[33mdata/nuclei.tif[39m[33m'[39m)  [38;5;66;03m# Substitute with an H&E image if available[39;00m
[32m----> [39m[32m4[39m gray_image = [43mcolor[49m[43m.[49m[43mrgb2gray[49m[43m([49m[43mrgb_image[49m[43m)[49m
[32m      6[39m plt.subplot([32m1[39m, [32m2[39m, [32m1[39m)
[32m      7[39m plt.imshow(rgb_image)

[36mFile [39m[32m~/anaconda3/envs/gbi-python-env/lib/python3.13/site-packages/skimage/_shared/utils.py:445[39m, in [36mchannel_as_last_axis.__call__.<locals>.fixed_func[39m[34m(*args, **kwargs)[39m
[32m    442[39m channel_axis = kwargs.get([33m'[39m[33mchannel_axis[39m[33m'[39m, [38;5;28;01mNone[39;00m)
[32m    444[39m [38;5;28;01mif[39;00m channel_axis [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m:
[32m--> [39m[32m445[39m     [38;5;28;01mreturn[39;00m [43mfunc[49m[43m([49m[43m*[49m[43margs[49m[43m,[49m[43m [49m[43m*[49m[43m*[49m[43mkwargs[49m[43m)[49m
[32m    447[39m [38;5;66;03m# TODO: convert scalars to a tuple in anticipation of eventually[39;00m
[32m    448[39m [38;5;66;03m#       supporting a tuple of channel axes. Right now, only an[39;00m
[32m    449[39m [38;5;66;03m#       integer or a single-element tuple is supported, though.[39;00m
[32m    450[39m [38;5;28;01mif[39;00m np.isscalar(channel_axis):

[36mFile [39m[32m~/anaconda3/envs/gbi-python-env/lib/python3.13/site-packages/skimage/color/colorconv.py:982[39m, in [36mrgb2gray[39m[34m(rgb, channel_axis)[39m
[32m    941[39m [38;5;129m@channel_as_last_axis[39m(multichannel_output=[38;5;28;01mFalse[39;00m)
[32m    942[39m [38;5;28;01mdef[39;00m[38;5;250m [39m[34mrgb2gray[39m(rgb, *, channel_axis=-[32m1[39m):
[32m    943[39m [38;5;250m    [39m[33;03m"""Compute luminance of an RGB image.[39;00m
[32m    944[39m 
[32m    945[39m [33;03m    Parameters[39;00m
[32m   (...)[39m[32m    980[39m [33;03m    >>> img_gray = rgb2gray(img)[39;00m
[32m    981[39m [33;03m    """[39;00m
[32m--> [39m[32m982[39m     rgb = [43m_prepare_colorarray[49m[43m([49m[43mrgb[49m[43m)[49m
[32m    983[39m     coeffs = np.array([[32m0.2125[39m, [32m0.7154[39m, [32m0.0721[39m], dtype=rgb.dtype)
[32m    984[39m     [38;5;28;01mreturn[39;00m rgb @ coeffs

[36mFile [39m[32m~/anaconda3/envs/gbi-python-env/lib/python3.13/site-packages/skimage/color/colorconv.py:170[39m, in [36m_prepare_colorarray[39m[34m(arr, force_copy, channel_axis)[39m
[32m    165[39m [38;5;28;01mif[39;00m arr.shape[channel_axis] != [32m3[39m:
[32m    166[39m     msg = (
[32m    167[39m         [33mf[39m[33m'[39m[33mthe input array must have size 3 along `channel_axis`, [39m[33m'[39m
[32m    168[39m         [33mf[39m[33m'[39m[33mgot [39m[38;5;132;01m{[39;00marr.shape[38;5;132;01m}[39;00m[33m'[39m
[32m    169[39m     )
[32m--> [39m[32m170[39m     [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m(msg)
[32m    172[39m float_dtype = _supported_float_type(arr.dtype)
[32m    173[39m [38;5;28;01mif[39;00m float_dtype == np.float32:

[31mValueError[39m: the input array must have size 3 along `channel_axis`, got (512, 512)

